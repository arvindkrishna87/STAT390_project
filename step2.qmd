---
title: "Step 2: Matching slices across stains"
---

**Aim: To identify and match structurally similar slices across stains for each patient.**

![](images/Step2.png){fig-align="center"}


# **Methodology**

The Matching Slices process identifies structurally similar tissue slices across stains (H&E, Melanin, Sox10) for each patient. Image files are prepared and organized, either collectively or by patient-specific folders. The pipeline, executed via match_pipeline.py and Jupyter Notebook, preprocesses images, extracts contours, and matches slices based on structural similarity. Results are saved in organized folders, with matched slices grouped for easy review. This automated process ensures accurate alignment across stains for further analysis.

:::{.callout-note collapse=true}

## Step-by-Step Manual

Two codes required:

-   `Team4Matching.ipynb`

-   `match_pipeline-2.py`

Follow these steps to use the pipeline to generate matching slices for all patients or a specific subset:

**1. Prepare Image Data:** Place .tif image files in the designated folder (e.g., processed_images). Ensure that each patient has images for all three stains (H&E, Melanin, Sox10).

**2. Choose Full or Subset Processing:**

For All Patients: Place all images in the same `processed_images` directory.

For a Subset of Patients: Separate patient image files into their own folders within processed_images (e.g., `processed_images/patient1`, `processed_images/patient2`). Run the Pipeline.

**3. Run `match_pipeline.py`.** A GUI will prompt you to select the directory containing the images. Open **`NoahsMatching.ipynb`** in Jupyter Notebook and execute cells in sequence. Process and Review Matches: Upon execution, the pipeline will preprocess, extract contours, and match images, saving results in the matches folder. Images will be organized by patient, with matched slices grouped in subfolders.

:::

# Results

**Example:**

All tissue slices from patient h2114153:

![](images/step%202%20images/slice1.png){width="125"} ![](images/step%202%20images//slice4.png){width="90"} ![](images/step%202%20images//slice5.png){width="106"} ![](images/step%202%20images//slice6.png){width="105"} ![](images/step%202%20images//slice2.png){width="121"} ![](images/step%202%20images//slice7.png){width="100"} ![](images/step%202%20images//slice3.png){width="113"}

**Successfully matched results**

![](images/step%202%20images//slice1.png){width="125"} ![](images/step%202%20images//slice2.png){width="121"} ![](images/step%202%20images//slice3.png){width="113"}

![](images/Step2.png){fig-align="center"}

# API for Matching Slices

Here is the API we created to automate this step

![](images/API.png){fig-align="center"}


